buildscript {
    ext { //전역변수 설정
        springBootVersion = '2.1.9.RELEASE'
    }
    repositories { //각종 의존성(라이브러리)들을 어떤 원격저장소에서 받을지를 정함.
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

//앞서 선언한 플러그인 의존성들을 적용할 것인지를 결정하는 코드
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management' //스프링 부트의 의존성들을 관리해주는 플러그인

group 'com.springbootstudy'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.projectlombok:lombok') //롬복은 자바 개발할 떄 자주사용하는 코드 Getter, Setter, 기본생성자, toString 등을 어노테이션으로 자동 생성. Enable annotation processing 체크해줘야 함.
    compile('org.springframework.boot:spring-boot-starter-data-jpa') //스프링 부트용 Spring Data Jpa 추상화 라이브러리. 스프링 부트 버전에 맞춰 자동으로 JPA 관련 라이버르리들의 버전을 관리해줌.
    // JPA? 자바 표준 ORM(Object Relational Mapping) 기술. JAVA에서 제공하는 API. JPA를 사용하기 위한 구현체(Hibernate,Eclipse LInk 등..).
    // Spring에서 이 구현체들을 좀 더 쉽게 사용하고자 추상화시킨 Spring Data JPA라는 모듈 이용.
    compile('com.h2database:h2') //인메모리 관계형 DB. 별도의 설치X, 프로젝트 의존성만으로 관리. 메모리에서 실행되기 때문에 애플리케이션을 재시작할 떄마다 초기화된다는 점을 이용하여 테스트 용도로 많이 사용. JPA의 테스트, 로컬환경에서의 구동에서 사용할 예정.
    testCompile('org.springframework.boot:spring-boot-starter-test')
}
